//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputManager"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""075a789b-498f-4dfa-909d-63c201c50f23"",
            ""actions"": [
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""419a9446-3fb3-4746-bb28-a73d1c2de733"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchEditMode"",
                    ""type"": ""Button"",
                    ""id"": ""05feba77-7f06-4154-91c3-18f34ff7ec5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickObject"",
                    ""type"": ""Button"",
                    ""id"": ""8891b103-7011-4f6d-ae09-a4e06bc66b45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchPickForm"",
                    ""type"": ""Button"",
                    ""id"": ""25c6dcea-d534-48c0-9aa3-713376ed79d1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlacePick"",
                    ""type"": ""Button"",
                    ""id"": ""9f95c88a-c464-422d-b4ed-c55aecd722ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""f1759696-3e5b-4de7-b434-790a769dbd2f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c06e96e5-fbec-4a45-b81d-2b17c1f7a6cb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7aa46d5f-b747-489b-bde8-a4e85d9a5d51"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""be4ef054-0a84-4620-aadb-97d85a7a47c5"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d8f05969-5216-4673-8252-ef9ad521216a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d04fa1c3-6813-4cbb-a6f2-ee0d42408d7b"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchEditMode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ce824cbe-bbcc-4595-8650-7b1760c0f9f1"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": ""Scale"",
                    ""groups"": """",
                    ""action"": ""PickObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe495180-d7fe-460f-ac93-17cb02b3ed4d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=2)"",
                    ""groups"": """",
                    ""action"": ""PickObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""303ca586-8366-4537-85be-c539f8dfa54b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=3)"",
                    ""groups"": """",
                    ""action"": ""PickObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9480a52a-0f14-4467-81b7-70012806d9ac"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=4)"",
                    ""groups"": """",
                    ""action"": ""PickObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c9d9569-c9b4-4eb0-a305-17dc3e859ef0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchPickForm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15e53d67-bd57-4df7-a67c-099bd9b7774a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacePick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_CameraMovement = m_Keyboard.FindAction("CameraMovement", throwIfNotFound: true);
        m_Keyboard_SwitchEditMode = m_Keyboard.FindAction("SwitchEditMode", throwIfNotFound: true);
        m_Keyboard_PickObject = m_Keyboard.FindAction("PickObject", throwIfNotFound: true);
        m_Keyboard_SwitchPickForm = m_Keyboard.FindAction("SwitchPickForm", throwIfNotFound: true);
        m_Keyboard_PlacePick = m_Keyboard.FindAction("PlacePick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_CameraMovement;
    private readonly InputAction m_Keyboard_SwitchEditMode;
    private readonly InputAction m_Keyboard_PickObject;
    private readonly InputAction m_Keyboard_SwitchPickForm;
    private readonly InputAction m_Keyboard_PlacePick;
    public struct KeyboardActions
    {
        private @InputManager m_Wrapper;
        public KeyboardActions(@InputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMovement => m_Wrapper.m_Keyboard_CameraMovement;
        public InputAction @SwitchEditMode => m_Wrapper.m_Keyboard_SwitchEditMode;
        public InputAction @PickObject => m_Wrapper.m_Keyboard_PickObject;
        public InputAction @SwitchPickForm => m_Wrapper.m_Keyboard_SwitchPickForm;
        public InputAction @PlacePick => m_Wrapper.m_Keyboard_PlacePick;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
            @SwitchEditMode.started += instance.OnSwitchEditMode;
            @SwitchEditMode.performed += instance.OnSwitchEditMode;
            @SwitchEditMode.canceled += instance.OnSwitchEditMode;
            @PickObject.started += instance.OnPickObject;
            @PickObject.performed += instance.OnPickObject;
            @PickObject.canceled += instance.OnPickObject;
            @SwitchPickForm.started += instance.OnSwitchPickForm;
            @SwitchPickForm.performed += instance.OnSwitchPickForm;
            @SwitchPickForm.canceled += instance.OnSwitchPickForm;
            @PlacePick.started += instance.OnPlacePick;
            @PlacePick.performed += instance.OnPlacePick;
            @PlacePick.canceled += instance.OnPlacePick;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
            @SwitchEditMode.started -= instance.OnSwitchEditMode;
            @SwitchEditMode.performed -= instance.OnSwitchEditMode;
            @SwitchEditMode.canceled -= instance.OnSwitchEditMode;
            @PickObject.started -= instance.OnPickObject;
            @PickObject.performed -= instance.OnPickObject;
            @PickObject.canceled -= instance.OnPickObject;
            @SwitchPickForm.started -= instance.OnSwitchPickForm;
            @SwitchPickForm.performed -= instance.OnSwitchPickForm;
            @SwitchPickForm.canceled -= instance.OnSwitchPickForm;
            @PlacePick.started -= instance.OnPlacePick;
            @PlacePick.performed -= instance.OnPlacePick;
            @PlacePick.canceled -= instance.OnPlacePick;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    public interface IKeyboardActions
    {
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnSwitchEditMode(InputAction.CallbackContext context);
        void OnPickObject(InputAction.CallbackContext context);
        void OnSwitchPickForm(InputAction.CallbackContext context);
        void OnPlacePick(InputAction.CallbackContext context);
    }
}
